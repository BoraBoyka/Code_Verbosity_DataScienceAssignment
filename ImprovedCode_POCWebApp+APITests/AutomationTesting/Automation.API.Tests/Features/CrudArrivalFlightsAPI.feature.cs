// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudArrivalFlightsAPIFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudArrivalFlightsAPI.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudArrivalFlightsAPI", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudArrivalFlightsAPI")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudArrivalFlightsAPIFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Arrival Flight and validate the response with DB record set" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIArrivalFlightAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Arrival Flight and validate the response with DB record set" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud Arrival Flight API And Set DTO Objects for Crud API Arrival Flight f" +
                        "or site claim \"MGL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchArrivalFlightData\" " +
                        "and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Arrival Flight by specific column and validate the fetched " +
            "details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIArrivalFlightBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Arrival Flight by specific column and validate the fetched " +
                    "details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("Generate new Get Arrival flight by \"Id\" API URL and Execute Crud Get By Id reques" +
                        "t and Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistArriva" +
                        "lFlight\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.Then("Validate the GET API operation by \"arrivalFlightId\" API URL again using the ID th" +
                        "at doesn\'t exist fetched from DB and it should return error via API for Crud Arr" +
                        "ival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchArrivalFlightDetail" +
                        "sWithDesSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("Generate new Get Arrival flight by \"Id\" API URL and Execute Crud Get By Id reques" +
                        "t for a different Site Id than what is being used in the token and validate that" +
                        " the api should return error in the response body for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud Arrival API Flight by FlightsByOperationalDate column and valid" +
            "ate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForFlightsByOperationalDateColumnValidation")]
        public void ValidateGetCrudArrivalAPIFlightByFlightsByOperationalDateColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseForFlightsByOperationalDateColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud Arrival API Flight by FlightsByOperationalDate column and valid" +
                    "ate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 25
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateArrFlightT" +
                        "able\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.Then("Generate new get \"GetByOperationDate\" using \"opDate\" with values \"2023-01-28\" and" +
                        " Execute Crud Get By OperationalDate request and Set DTO Objects for Crud Arriva" +
                        "l Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForOpD" +
                        "ateArrFlight\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateArrFlight\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Arrival Flight for all the site claims that user has access" +
            " to and validate the response with DB record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIArrivalFlightForAllTheSiteClaimsThatUserHasAccessToAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Arrival Flight for all the site claims that user has access" +
                    " to and validate the response with DB record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 33
    testRunner.Then("Execute Crud Arrival Flight API And Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchArrFlightDataForAll" +
                        "SiteClaims\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Arrival Flight Get Crud API and pass incorrect siteId in the token and v" +
            "alidate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateArrivalFlightGetCrudAPIAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Arrival Flight Get Crud API and pass incorrect siteId in the token and v" +
                    "alidate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 38
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 39
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedArrival" +
                        "FlightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteZRHForTestData\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 43
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataArrivalFlightTabl" +
                        "e\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.Then("Fetch value for site \"MGL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteMGLForTestData\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataArrivalFlightTabl" +
                        "e\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteTXLForTestData\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataArrivalFlightTabl" +
                        "e\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.Then("Execute Crud Arrival Flight API with an incorrect Site id for site claim \"BadSite" +
                        "\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Arrival Flight with a different siteId than what is being p" +
            "assed in the token and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateGetCrudAPIArrivalFlightWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Arrival Flight with a different siteId than what is being p" +
                    "assed in the token and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 58
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataWithSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.Then("Generate new Get Arrival Flight by \"Id\" API URL using different Site id \"TXL\" tha" +
                        "n what is being used in the token and validate that the Arrival api should retur" +
                        "n error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Arrival Flight Delete Crud API for specific row and validate the fet" +
            "ched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateTheArrivalFlightDeleteCrudAPIForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Arrival Flight Delete Crud API for specific row and validate the fet" +
                    "ched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 62
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 63
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 67
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedArriva" +
                        "lFlightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
    testRunner.Then("Validate the GET API operation again using the same deleted ID and it should retu" +
                        "rn error via API for Crud Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Arrival Flight Delete Crud API with a different Site Id passed in th" +
            "e token and validate that the record with another site id should not be deleted " +
            "via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateTheArrivalFlightDeleteCrudAPIWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Arrival Flight Delete Crud API with a different Site Id passed in th" +
                    "e token and validate that the record with another site id should not be deleted " +
                    "via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 82
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchArrivalFlightDetail" +
                        "sWithDesSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("Generate new Delete Arrival Flight API URL with an different Site id than what is" +
                        " being used in the token and validate that the api should return error in the re" +
                        "sponse body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud Arrival API Unmatched Flight by FlightsByOperationDate column a" +
            "nd validate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getUnmatchedFlightsAPIRequestResponseValidation")]
        public void ValidateGetCrudArrivalAPIUnmatchedFlightByFlightsByOperationDateColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getUnmatchedFlightsAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud Arrival API Unmatched Flight by FlightsByOperationDate column a" +
                    "nd validate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 86
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 87
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateCallSignArrFlightT" +
                        "able\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateArrFlightT" +
                        "able\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
    testRunner.Then("Generate new get \"GetUnmatchedFlights\" using \"opDate\" with values \"2023-01-26\" an" +
                        "d Execute Crud Get By Unmatched flight request and Set DTO Objects for Crud Arri" +
                        "val Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForUnm" +
                        "atchedFlight\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateArrFlight\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Arrival Flight and validate the record gets added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIArrivalFlightAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Arrival Flight and validate the record gets added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 95
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 96
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 98
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
    testRunner.Then("Execute Crud Post Arrival Flight API with only sending Icao value in the request " +
                        "body and Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
    testRunner.Then("Execute Crud Post Arrival Flight API using the same request body and verify that " +
                        "the response should return the recent added Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Arrival Flight with partial child without passing SiteId i" +
            "n the request body and validate the record gets added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIArrivalFlightWithPartialChildWithoutPassingSiteIdInTheRequestBodyAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Arrival Flight with partial child without passing SiteId i" +
                    "n the request body and validate the record gets added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 113
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 114
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.Then("Execute Crud Post Arrival Flight API with partial child without SiteId and Set DT" +
                        "O Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.Then("Execute Crud Post Arrival Flight API using the same request body and verify that " +
                        "the response should return the recent added Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Arrival Flight and validate the record gets updated into DB" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIArrivalFlightAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Arrival Flight and validate the record gets updated into DB" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 131
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 132
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 134
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.Then("Execute Crud Post Arrival Flight API with only sending Icao value in the request " +
                        "body and Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
    testRunner.Then("Generate new put Arrival Flight API URL with only sending Iata in the request bod" +
                        "y and Execute Crud Put API Arrival Flight and Set DTO Objects for Crud API Arriv" +
                        "al Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 148
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Add Arrival Flight List and validate the record gets added" +
            " into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIAddArrivalFlightList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIAddArrivalFlightListAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIAddArrivalFlightList",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Add Arrival Flight List and validate the record gets added" +
                    " into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 151
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 152
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 154
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.Then("Execute Crud Post \"AddArrivalList\" API and Set DTO Objects for Crud API Add Arriv" +
                        "al Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoAr" +
                        "rivalFlightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedArrivalFlightData" +
                        "ForTop2Rows\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Arrival Flight insert with a different Site Id than what i" +
            "s being passed in the token and validate that the record should not be inserted " +
            "via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePostCrudAPIArrivalFlightInsertWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeInsertedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Arrival Flight insert with a different Site Id than what i" +
                    "s being passed in the token and validate that the record should not be inserted " +
                    "via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 166
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 167
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 169
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataForSiteIdDesc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
    testRunner.Then("Execute Crud Post Arrival Flight API using different Site id than what is being u" +
                        "sed in the token and validate that the api should return error in the response b" +
                        "ody", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Arrival Flight update with a different Site Id than what is" +
            " being passed in the token and validate that the record should not be updated vi" +
            "a api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePutCrudAPIArrivalFlightUpdateWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeUpdatedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "putAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Arrival Flight update with a different Site Id than what is" +
                    " being passed in the token and validate that the record should not be updated vi" +
                    "a api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 177
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 178
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 180
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
    testRunner.Then("Generate new put Arrival Flight API URL using different Site id than what is bein" +
                        "g used in the token and validate that the api should return error in the respons" +
                        "e body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Arrival Flight with a SiteId that user doesn\'t have access" +
            " to and validate the record should not be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIArrivalFlightWithASiteIdThatUserDoesntHaveAccessToAndValidateTheRecordShouldNotBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Arrival Flight with a SiteId that user doesn\'t have access" +
                    " to and validate the record should not be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 185
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
    testRunner.Then("Execute Crud Post Arrival Flight API for negative test and verify that error shou" +
                        "ld be thrown via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Arrival Flight with an incorrect SiteId in the child objec" +
            "t and validate the record should still be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIArrivalFlightWithAnIncorrectSiteIdInTheChildObjectAndValidateTheRecordShouldStillBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Arrival Flight with an incorrect SiteId in the child objec" +
                    "t and validate the record should still be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 189
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 190
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.Then("Execute Crud Post Arrival Flight API with incorrect SiteId in the child object an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Arrival Flight with a SiteId that user doesn\'t have access " +
            "to and validate the record should not be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIArrivalFlightWithASiteIdThatUserDoesntHaveAccessToAndValidateTheRecordShouldNotBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Arrival Flight with a SiteId that user doesn\'t have access " +
                    "to and validate the record should not be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 199
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 200
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 201
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
    testRunner.Then("Generate new put Arrival Flight API URL for negative test and verify that error s" +
                        "hould be thrown via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Arrival Flight API For Audit By Id AP" +
            "I Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIArrivalFlightAPIForAuditByIdAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Arrival Flight API For Audit By Id AP" +
                    "I Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 206
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 207
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
    testRunner.And("Generate new Get Arrival flight by \"Audit\" and \"Id\" using \"historyId\" with value " +
                        "fetched from DB response in above step and Set DTO Objects for Crud Arrival Flig" +
                        "ht API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 218
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 219
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 220
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Arrival Flight Record Addition using Get Crud API Arrival Flight API For" +
            " Audit By Id API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateArrivalFlightRecordAdditionUsingGetCrudAPIArrivalFlightAPIForAuditByIdAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Arrival Flight Record Addition using Get Crud API Arrival Flight API For" +
                    " Audit By Id API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 223
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 224
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 225
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 227
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 230
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
    testRunner.Then("Generate new put Arrival Flight API URL using database fetched values and Execute" +
                        " Crud Put API Arrival Flight and Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 238
    testRunner.And("Generate new Get Arrival flight by \"Audit\" and \"Id\" using \"historyId\" with value " +
                        "fetched from DB response in above step and verify the details for recent updated" +
                        " arrival record for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Audit Flig" +
                        "ht API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Arrival Flight API For Audit By Id AP" +
            "I Validation For Delete Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIArrivalFlightAPIForAuditByIdAPIValidationForDeleteOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Arrival Flight API For Audit By Id AP" +
                    "I Validation For Delete Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 246
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 247
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 250
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 254
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 258
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 259
    testRunner.And("Generate new Get Arrival flight by \"Audit\" and \"Id\" using \"historyId\" with value " +
                        "fetched from DB response in above step and verify the details for recent updated" +
                        " arrival record for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Audit Flig" +
                        "ht API For Delete record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Arrival Flight API For Audit By TimeS" +
            "tamp API Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIArrivalFlightAPIForAuditByTimeStampAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Arrival Flight API For Audit By TimeS" +
                    "tamp API Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 265
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 266
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 272
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 274
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 277
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 280
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 282
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
    testRunner.And("Generate new Get Arrival flight by \"Audit\" and \"Time\" using \"timestamp\" with valu" +
                        "e fetched from DB response and Set DTO Objects for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 285
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 286
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 287
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Arrival Flight API For Audit By TimeS" +
            "tamp API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIArrivalFlightAPIForAuditByTimeStampAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Arrival Flight API For Audit By TimeS" +
                    "tamp API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 290
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 291
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 292
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 296
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 297
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 298
    testRunner.Then("Execute Crud Post Arrival Flight API and Set DTO Objects for Crud API Arrival Fli" +
                        "ght", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 300
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 301
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 302
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 305
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 307
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 309
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 312
    testRunner.Then("Generate new put Arrival Flight API URL using database fetched values and Execute" +
                        " Crud Put API Arrival Flight and Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 313
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightDataForSiteIdAsc\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 314
    testRunner.And("Generate new Get Arrival flight by \"Audit\" and \"Time\" using \"timestamp\" with valu" +
                        "e fetched in above step and verify the details for recent updated arrival record" +
                        " for Crud Arrival Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 315
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateArrivalD" +
                        "etails\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 318
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Audit Flig" +
                        "ht API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedArrivalF" +
                        "lightData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 320
    testRunner.And("Generate new Delete Arrival flight API URL and Execute Crud Delete API request an" +
                        "d Set DTO Objects for Crud API Arrival Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 321
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud UnmatchedFlightPlan API for Arrival Unmatched Flights and valid" +
            "ate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForArrivalUnmatchedFlightsValidation")]
        public void ValidateGetCrudUnmatchedFlightPlanAPIForArrivalUnmatchedFlightsAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "getAPIRequestResponseForArrivalUnmatchedFlightsValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud UnmatchedFlightPlan API for Arrival Unmatched Flights and valid" +
                    "ate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 324
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 325
    testRunner.Then("Generate new get \"ArrivalUnmatchedFlights\" using \"opDate\" with values \"2023-01-26" +
                        "\" and Execute Crud Get All Arrival Unmatched Flights request and Set DTO Objects" +
                        " for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 326
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForArr" +
                        "ivalWithNoFlightPlan\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 327
    testRunner.And("Compare values from API response set to DB record set for Crud Arrival Flight API" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan " +
            "body based on Arrival Flight plan Id and Operation date and validate the record " +
            "gets updated into Arrival DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("patchAPIRequestResponseValidationForArrivalFlights")]
        public void ValidateThePatchCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnArrivalFlightPlanIdAndOperationDateAndValidateTheRecordGetsUpdatedIntoArrivalDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "patchAPIRequestResponseValidationForArrivalFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan " +
                    "body based on Arrival Flight plan Id and Operation date and validate the record " +
                    "gets updated into Arrival DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 330
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 331
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 332
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 333
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 334
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 335
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 337
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 339
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 341
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 343
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 344
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 345
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanIdOperat" +
                        "ionDateArrivalTable\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 346
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 347
    testRunner.Then("Generate new patch Unmatched Flight Plan API URL using fetched values and Execute" +
                        " Crud Patch Unmatched Flight Plan API and validate that the record in Arrival ta" +
                        "ble is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 348
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 349
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 351
    testRunner.Then("Generate new Delete \"FlightPlanid\" using \"flightPlanid\" with value \"AT08998877\" a" +
                        "nd \"opDate\" with value \"2022-05-06\" and Execute Crud Delete flight plan id reque" +
                        "st and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 352
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan body based on Arrival Flight plan Id and Operation date and validate the record gets updated into Arrival DB and also validate that the record should be deleted from unmatched flight plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("patchAPIRequestResponseValidationForArrivalFlights")]
        public void ValidateThePatchCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnArrivalFlightPlanIdAndOperationDateAndValidateTheRecordGetsUpdatedIntoArrivalDBAndAlsoValidateThatTheRecordShouldBeDeletedFromUnmatchedFlightPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "patchAPIRequestResponseValidationForArrivalFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan body based on Arrival Flight plan Id and Operation date and validate the record gets updated into Arrival DB and also validate that the record should be deleted from unmatched flight plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 355
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 356
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 357
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 359
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 360
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 361
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 362
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 365
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 366
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 367
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 368
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 369
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 370
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 371
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanIdOperat" +
                        "ionDateArrivalTableWithUnmatchedData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 372
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 373
    testRunner.Then("Generate new patch Unmatched Flight Plan API URL using fetched values and Execute" +
                        " Crud Patch Unmatched Flight Plan API and validate that the record in Arrival ta" +
                        "ble is updated and the same in unmatched table is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 374
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteIdWithFieldValueNull\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 375
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 376
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 377
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Validate The Put Crud API Unmatched Flight Plan API and update the flight plan body based on combination of Arrival Site && Carrier && FlightNumber &&  OperationDate && Origin and validate the record gets updated into Arrival DB and should be deleted from unmatched flight plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidationForArrivalFlights")]
        public void ValidateThePutCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnCombinationOfArrivalSiteCarrierFlightNumberOperationDateOriginAndValidateTheRecordGetsUpdatedIntoArrivalDBAndShouldBeDeletedFromUnmatchedFlightPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "putAPIRequestResponseValidationForArrivalFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Validate The Put Crud API Unmatched Flight Plan API and update the flight plan body based on combination of Arrival Site && Carrier && FlightNumber &&  OperationDate && Origin and validate the record gets updated into Arrival DB and should be deleted from unmatched flight plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 380
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 381
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 382
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 383
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 384
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 385
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 386
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 387
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 389
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 390
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 391
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 392
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 393
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 394
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 395
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 396
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateCarrierFlightNumOp" +
                        "dateOriginArrivalTableWithUnmatchedData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 397
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 398
    testRunner.Then("Generate new put Unmatched Flight Plan API URL using fetched values and Execute C" +
                        "rud Put Unmatched Flight Plan API and validate that the record in Arrival table " +
                        "is updated and the same in unmatched table is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 399
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteIdWithFieldValueNull\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 400
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 401
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsFieldValues\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 402
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Validate The Post Crud Unmatched Flight Plan API without a Callsign value in the request body and update the flight plan body based on Arrival Flight plan Id and Operation date and Callsign value and validate the record gets updated into Arrival DB and also validate that it should be deleted from unmatched flight plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudArrivalFlightsAPI")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIArrivalFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidationForArrivalFlights")]
        public void ValidateThePostCrudUnmatchedFlightPlanAPIWithoutACallsignValueInTheRequestBodyAndUpdateTheFlightPlanBodyBasedOnArrivalFlightPlanIdAndOperationDateAndCallsignValueAndValidateTheRecordGetsUpdatedIntoArrivalDBAndAlsoValidateThatItShouldBeDeletedFromUnmatchedFlightPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIArrivalFlights",
                    "postAPIRequestResponseValidationForArrivalFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Validate The Post Crud Unmatched Flight Plan API without a Callsign value in the request body and update the flight plan body based on Arrival Flight plan Id and Operation date and Callsign value and validate the record gets updated into Arrival DB and also validate that it should be deleted from unmatched flight plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 405
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 406
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 407
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 408
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 409
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 410
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 411
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 412
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 413
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 414
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 415
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 416
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 417
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 418
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 420
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 421
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanIdOpDate" +
                        "CallsignNullArrivalTableWithUnmatchedData\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 422
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 423
    testRunner.Then("Generate new post Unmatched Flight Plan API URL using fetched values and Execute " +
                        "Crud Post Unmatched Flight Plan API and validate that the record in Arrival tabl" +
                        "e is updated with the CallSign and the same in unmatched table is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 424
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteIdWithFieldValueNull\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 425
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 426
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 427
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
