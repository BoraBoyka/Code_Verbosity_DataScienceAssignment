// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPIWakeTurbulenceCategoryFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPIWakeTurbulenceCategory.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPIWakeTurbulenceCategory", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPIWakeTurbulenceCategory")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPIWakeTurbulenceCategoryFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeTurbulenceCategory and validate the response with DB re" +
            "cord set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIWakeTurbulenceCategoryAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeTurbulenceCategory and validate the response with DB re" +
                    "cord set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud WakeTurbulenceCategory API And Set DTO Objects for Crud API WakeTurb" +
                        "ulenceCategory for site claim \"ZRH\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryOutput\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set for Crud WakeTurbulenceCate" +
                        "gory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud API Post WakeTurbulenceCategory and validate the record gets added " +
            "into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidateCrudAPIPostWakeTurbulenceCategoryAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud API Post WakeTurbulenceCategory and validate the record gets added " +
                    "into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.Then("Execute Crud Post WakeTurbulenceCategory API and Set DTO Objects for Crud API Wak" +
                        "eTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeTurbulenceCategory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.Then("again Execute Crud Post WakeTurbulenceCategory API with a duplicate Category and " +
                        "Category name value and verify that it should return error via API for Crud Wake" +
                        "TurbulenceCategory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeTurbulenceCategory by specific column and validate the " +
            "fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIWakeTurbulenceCategoryBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeTurbulenceCategory by specific column and validate the " +
                    "fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 24
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.And("Generate new Get WakeTurbulenceCategory by \"Id\" API URL and Execute Crud Get By I" +
                        "d request and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeTurbulenceCategory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistWakeTu" +
                        "rbulenceCategory\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.Then("Validate the GET API operation by \"Id\" API URL again using the ID that doesn\'t ex" +
                        "ist fetched from DB and it should return error via API for Crud WakeTurbulenceCa" +
                        "tegory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeTurbu" +
                        "lenceCategoryTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryDetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("Generate new Get WakeTurbulenceCategory by \"Id\" API URL and Execute Crud Get By I" +
                        "d request for a different Site Id than what is being used in the token and valid" +
                        "ate that the api should return error in the response body for Crud API WakeTurbu" +
                        "lenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteWakeTurbulenceCate" +
                        "goryDetails\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API WakeTurbulenceCategory and validate the record gets updated" +
            " into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIWakeTurbulenceCategoryAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API WakeTurbulenceCategory and validate the record gets updated" +
                    " into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 38
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.Then("Execute Crud Post WakeTurbulenceCategory API and Set DTO Objects for Crud API Wak" +
                        "eTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.Then("Generate new put WakeTurbulenceCategory API URL using database fetched values and" +
                        " Execute Crud Put API WakeTurbulenceCategory and Set DTO Objects for Crud API Wa" +
                        "keTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeTurbulenceCategory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Delete Crud API WakeTurbulenceCategory for specific row and validate the" +
            " fetched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateDeleteCrudAPIWakeTurbulenceCategoryForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Delete Crud API WakeTurbulenceCategory for specific row and validate the" +
                    " fetched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 48
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.Then("Execute Crud Post WakeTurbulenceCategory API and Set DTO Objects for Crud API Wak" +
                        "eTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedWakeTu" +
                        "rbulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.Then("Validate the GET API operation again using the same deleted ID and it should retu" +
                        "rn error via API for Crud WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Add WakeTurbulenceCategory List and validate the record ge" +
            "ts added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategoryList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIAddWakeTurbulenceCategoryListAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategoryList",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Add WakeTurbulenceCategory List and validate the record ge" +
                    "ts added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 57
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.Then("Execute Crud Post \"AddWakeTurbulenceCategoryList\" API and Set DTO Objects for Cru" +
                        "d API Add WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keTurbulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("Compare values from API response set to DB record set for Crud WakeTurbulenceCate" +
                        "gory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedWakeTurbulenceCat" +
                        "egoryDataForTop2Rows\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Add WakeTurbulenceCategory List and validate the record get" +
            "s added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategoryList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIAddWakeTurbulenceCategoryListAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategoryList",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Add WakeTurbulenceCategory List and validate the record get" +
                    "s added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 66
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.Then("Execute Crud Post \"AddWakeTurbulenceCategoryList\" API and Set DTO Objects for Cru" +
                        "d API Add WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keTurbulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.Then("Execute Crud Put \"UpdateWakeTurbulenceCategoryList\" API and Set DTO Objects for C" +
                        "rud API Add WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keTurbulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.And("Compare values from API response set to DB record set for Crud WakeTurbulenceCate" +
                        "gory API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 73
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedWakeTurbulenceCat" +
                        "egoryDataForTop2Rows\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeTurbulenceCategory and pass incorrect siteId in the tok" +
            "en and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateGetCrudAPIWakeTurbulenceCategoryAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeTurbulenceCategory and pass incorrect siteId in the tok" +
                    "en and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 76
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 77
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 79
    testRunner.Then("Execute Crud WakeTurbulenceCategory API with an incorrect Site id for site claim " +
                        "\"BadSite\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeTurbulenceCategory with a different siteId than what is" +
            " being passed in the token and validate that the api should not return any respo" +
            "nse")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateGetCrudAPIWakeTurbulenceCategoryWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeTurbulenceCategory with a different siteId than what is" +
                    " being passed in the token and validate that the api should not return any respo" +
                    "nse", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 82
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 83
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 84
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeTurbu" +
                        "lenceCategoryTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryDetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
    testRunner.And("Generate new Get WakeTurbulenceCategory by \"Id\" API URL using different Site id \"" +
                        "TXL\" than what is being used in the token and validate that the api should retur" +
                        "n error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Delete Crud API WakeTurbulenceCategory with a different Site Id passed i" +
            "n the token and validate that the record with another site id should not be dele" +
            "ted via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateDeleteCrudAPIWakeTurbulenceCategoryWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Delete Crud API WakeTurbulenceCategory with a different Site Id passed i" +
                    "n the token and validate that the record with another site id should not be dele" +
                    "ted via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 95
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeTurbu" +
                        "lenceCategoryTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL with an different Site id than" +
                        " what is being used in the token and validate that the api should return error i" +
                        "n the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API WakeTurbulenceCategory insert with a different Site Id tha" +
            "n what is being passed in the token and validate that the record should not be i" +
            "nserted via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePostCrudAPIWakeTurbulenceCategoryInsertWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeInsertedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "postAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API WakeTurbulenceCategory insert with a different Site Id tha" +
                    "n what is being passed in the token and validate that the record should not be i" +
                    "nserted via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 107
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.Then("Execute Crud Post WakeTurbulenceCategory API using different Site id than what is" +
                        " being used in the token and validate that the api should return error in the re" +
                        "sponse body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.Then("Execute Crud Post WakeTurbulenceCategory API and Set DTO Objects for Crud API Wak" +
                        "eTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API WakeTurbulenceCategory update with a different Site Id than" +
            " what is being passed in the token and validate that the record should not be up" +
            "dated via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeTurbulenceCategory")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePutCrudAPIWakeTurbulenceCategoryUpdateWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeUpdatedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeTurbulenceCategory",
                    "putAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API WakeTurbulenceCategory update with a different Site Id than" +
                    " what is being passed in the token and validate that the record should not be up" +
                    "dated via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 116
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeTurbu" +
                        "lenceCategoryTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryDetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.Then("Generate new put WakeTurbulenceCategory API URL using different Site id than what" +
                        " is being used in the token and validate that the api should return error in the" +
                        " response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeTurb" +
                        "ulenceCategoryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.And("Generate new Delete WakeTurbulenceCategory API URL and Execute Crud Delete API re" +
                        "quest and Set DTO Objects for Crud API WakeTurbulenceCategory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
