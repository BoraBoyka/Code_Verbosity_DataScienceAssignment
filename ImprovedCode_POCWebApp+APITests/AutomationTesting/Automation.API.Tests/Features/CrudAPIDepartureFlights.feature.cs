// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPIDepartureFlightsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPIDepartureFlights.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPIDepartureFlights", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPIDepartureFlights")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPIDepartureFlightsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight and validate the response with DB record s" +
            "et")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIDepartureFlightAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight and validate the response with DB record s" +
                    "et", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud Departure Flight API And Set DTO Objects for Crud API Departure Flig" +
                        "ht for site claim \"MGL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchDepartureFlightData" +
                        "\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight by specific column and validate the fetche" +
            "d details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIDepartureFlightBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight by specific column and validate the fetche" +
                    "d details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("Generate new Get Departure flight by \"Id\" API URL and Execute Crud Get By Id requ" +
                        "est and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistDepart" +
                        "ureFlight\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.Then("Validate the GET API operation by \"departureFlightId\" API URL again using the ID " +
                        "that doesn\'t exist fetched from DB and it should return error via API for Crud D" +
                        "eparture Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchDepartureFlightDeta" +
                        "ilsWithDesSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("Generate new Get Departure flight by \"Id\" API URL and Execute Crud Get By Id requ" +
                        "est for a different Site Id than what is being used in the token and validate th" +
                        "at the api should return error in the response body for Crud API Departure Fligh" +
                        "t", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight by FlightsByTobt column and validate the f" +
            "etched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForFlightsByTobtColumnValidation")]
        public void ValidateGetCrudAPIDepartureFlightByFlightsByTobtColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForFlightsByTobtColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight by FlightsByTobt column and validate the f" +
                    "etched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 24
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 25
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTobtTimeDepartureF" +
                        "lightTable\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.Then("Generate new get \"GetByTobt\" using \"startDateTime\" and \"endDateTime\" with values " +
                        "\"2023-01-28\" and \"2023-01-30\" and Execute Crud Get By Tobt request and Set DTO O" +
                        "bjects for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForTob" +
                        "tDepFlight\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud Departure API Flight by FlightsByOperationalDate column and val" +
            "idate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForFlightsByOperationalDateColumnValidation")]
        public void ValidateGetCrudDepartureAPIFlightByFlightsByOperationalDateColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForFlightsByOperationalDateColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud Departure API Flight by FlightsByOperationalDate column and val" +
                    "idate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 32
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateDepFlightT" +
                        "able\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.Then("Generate new get \"GetByOperationalDate\" using \"opDate\" with values \"2023-01-28\" a" +
                        "nd Execute Crud Get By OperationalDate request and Set DTO Objects for Crud Depa" +
                        "rture Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForOpD" +
                        "ateDepFlight\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateDepFlight\"" +
                        " and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight for all the site claims that user has acce" +
            "ss to and validate the response with DB record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIDepartureFlightForAllTheSiteClaimsThatUserHasAccessToAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight for all the site claims that user has acce" +
                    "ss to and validate the response with DB record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 40
    testRunner.Then("Execute Crud Departure Flight API And Set DTO Objects for Crud API Departure Flig" +
                        "ht", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchDepFlightDataForAll" +
                        "SiteClaims\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight and pass incorrect siteId in the token and" +
            " validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateGetCrudAPIDepartureFlightAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight and pass incorrect siteId in the token and" +
                    " validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 46
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedDepartu" +
                        "reFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteZRHForTestData\"" +
                        " and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataDepartureFlightTa" +
                        "ble\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.Then("Fetch value for site \"MGL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteMGLForTestData\"" +
                        " and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 54
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataDepartureFlightTa" +
                        "ble\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteTXLForTestData\"" +
                        " and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 58
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataDepartureFlightTa" +
                        "ble\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.Then("Execute Crud Departure Flight API with an incorrect Site id for site claim \"BadSi" +
                        "te\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Departure Flight with a different siteId than what is being" +
            " passed in the token and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateGetCrudAPIDepartureFlightWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Departure Flight with a different siteId than what is being" +
                    " passed in the token and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 65
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataWithSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 66
    testRunner.Then("Generate new Get Departure Flight by \"Id\" API URL using different Site id \"TXL\" t" +
                        "han what is being used in the token and validate that the departure api should r" +
                        "eturn error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Departure Flight Delete Crud API for specific row and validate the f" +
            "etched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateTheDepartureFlightDeleteCrudAPIForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Departure Flight Delete Crud API for specific row and validate the f" +
                    "etched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 70
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 72
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
    testRunner.And("Fetch value for field \"Id\" against Aircraft Type Id fetched from database respons" +
                        "e to the above query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 82
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedDepart" +
                        "ureFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.Then("Validate the GET API operation again using the same deleted ID and it should retu" +
                        "rn error via API for Crud Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Departure Flight Delete Crud API with a different Site Id passed in " +
            "the token and validate that the record with another site id should not be delete" +
            "d via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateTheDepartureFlightDeleteCrudAPIWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Departure Flight Delete Crud API with a different Site Id passed in " +
                    "the token and validate that the record with another site id should not be delete" +
                    "d via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 90
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchDepartureFlightDeta" +
                        "ilsWithDesSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
    testRunner.And("Generate new Delete Departure Flight API URL with an different Site id than what " +
                        "is being used in the token and validate that the api should return error in the " +
                        "response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Departure Flight and validate the record gets added into D" +
            "B")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIDepartureFlightAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Departure Flight and validate the record gets added into D" +
                    "B", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 95
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 99
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.Then("Execute Crud Post Departure Flight API with only sending Icao value in the reques" +
                        "t body and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
    testRunner.Then("Execute Crud Post Departure Flight API using the same request body and verify tha" +
                        "t the response should return the recent added Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Departure Flight with partial child without passing SiteId" +
            " in the request body and validate the record gets added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIDepartureFlightWithPartialChildWithoutPassingSiteIdInTheRequestBodyAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Departure Flight with partial child without passing SiteId" +
                    " in the request body and validate the record gets added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 113
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 117
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.Then("Execute Crud Post Departure Flight API with partial child without SiteId and Set " +
                        "DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.Then("Execute Crud Post Departure Flight API using the same request body and verify tha" +
                        "t the response should return the recent added Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Departure Flight and validate the record gets updated into " +
            "DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIDepartureFlightAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Departure Flight and validate the record gets updated into " +
                    "DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 130
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 131
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 133
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 135
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.Then("Execute Crud Post Departure Flight API with only sending Icao value in the reques" +
                        "t body and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataForSiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
    testRunner.Then("Generate new put Departure Flight API URL with only sending Iata in the request b" +
                        "ody and Execute Crud Put API Departure Flight and Set DTO Objects for Crud API D" +
                        "eparture Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 147
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Add Departure Flight List and validate the record gets add" +
            "ed into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIAddDepartureFlightList")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIAddDepartureFlightListAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIAddDepartureFlightList",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Add Departure Flight List and validate the record gets add" +
                    "ed into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 150
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 151
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 153
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 155
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
    testRunner.Then("Execute Crud Post \"AddDepartureList\" API and Set DTO Objects for Crud API Add Dep" +
                        "arture Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoDe" +
                        "partureFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedDepartureFlightDa" +
                        "taForTop2Rows\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Departure Flight insert with a different Site Id than what" +
            " is being passed in the token and validate that the record should not be inserte" +
            "d via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePostCrudAPIDepartureFlightInsertWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeInsertedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "postAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Departure Flight insert with a different Site Id than what" +
                    " is being passed in the token and validate that the record should not be inserte" +
                    "d via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 165
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 166
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataForSiteIdDesc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
    testRunner.Then("Execute Crud Post Departure Flight API using different Site id than what is being" +
                        " used in the token and validate that the api should return error in the response" +
                        " body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Departure Flight update with a different Site Id than what " +
            "is being passed in the token and validate that the record should not be updated " +
            "via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePutCrudAPIDepartureFlightUpdateWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeUpdatedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "putAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Departure Flight update with a different Site Id than what " +
                    "is being passed in the token and validate that the record should not be updated " +
                    "via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 177
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
    testRunner.Then("Generate new put Departure Flight API URL using different Site id than what is be" +
                        "ing used in the token and validate that the api should return error in the respo" +
                        "nse body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Departure Flight with a SiteId that user doesn\'t have acce" +
            "ss to and validate the record should not be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIDepartureFlightWithASiteIdThatUserDoesntHaveAccessToAndValidateTheRecordShouldNotBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Departure Flight with a SiteId that user doesn\'t have acce" +
                    "ss to and validate the record should not be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 183
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 184
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
    testRunner.Then("Execute Crud Post Departure Flight API for negative test and verify that error sh" +
                        "ould be thrown via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Departure Flight with an incorrect SiteId in the child obj" +
            "ect and validate the record should still be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIDepartureFlightWithAnIncorrectSiteIdInTheChildObjectAndValidateTheRecordShouldStillBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Departure Flight with an incorrect SiteId in the child obj" +
                    "ect and validate the record should still be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 188
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 189
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
    testRunner.Then("Execute Crud Post Departure Flight API with incorrect SiteId in the child object " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Departure Flight with a SiteId that user doesn\'t have acces" +
            "s to and validate the record should not be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIDepartureFlightWithASiteIdThatUserDoesntHaveAccessToAndValidateTheRecordShouldNotBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Departure Flight with a SiteId that user doesn\'t have acces" +
                    "s to and validate the record should not be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 198
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 199
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "SiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 202
    testRunner.Then("Generate new put Departure Flight API URL for negative test and verify that error" +
                        " should be thrown via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud Departure API Unmatched Flight by FlightsByOperationDate column" +
            " and validate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getUnmatchedFlightsAPIRequestResponseValidation")]
        public void ValidateGetCrudDepartureAPIUnmatchedFlightByFlightsByOperationDateColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getUnmatchedFlightsAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud Departure API Unmatched Flight by FlightsByOperationDate column" +
                    " and validate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 205
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 206
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateCallSignDepFlightT" +
                        "able\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateDepFlightT" +
                        "able\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 208
    testRunner.Then("Generate new get \"GetUnmatchedFlights\" using \"opDate\" with values \"2023-01-26\" an" +
                        "d Execute Crud Get By Unmatched flight request and Set DTO Objects for Crud Depa" +
                        "rture Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForUnm" +
                        "atchedDepFlight\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 211
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateDepFlight\"" +
                        " and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
            "API Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIDepartureFlightAPIForAuditByIdAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
                    "API Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 215
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 220
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 221
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 222
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 223
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
    testRunner.And("Generate new Get Departure flight by \"Audit\" and \"Id\" using \"historyId\" with valu" +
                        "e fetched from DB response in above step and Set DTO Objects for Crud Departure " +
                        "Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 226
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 227
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 228
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
            "API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIDepartureFlightAPIForAuditByIdAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
                    "API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 231
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 232
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 233
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 234
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 236
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 237
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 239
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 241
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
    testRunner.Then("Generate new put Departure Flight API URL using database fetched values and Execu" +
                        "te Crud Put API Departure Flight and Set DTO Objects for Crud API Departure Flig" +
                        "ht", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 244
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 245
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 246
    testRunner.And("Generate new Get Departure flight by \"Audit\" and \"Id\" using \"historyId\" with valu" +
                        "e fetched from DB response in above step and verify the details for recent updat" +
                        "ed departure record for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 247
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 248
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Audit Fl" +
                        "ight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 250
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 251
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
            "API Validation For Delete Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIDepartureFlightAPIForAuditByIdAPIValidationForDeleteOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Departure Flight API For Audit By Id " +
                    "API Validation For Delete Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 254
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 255
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 258
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 259
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 260
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 262
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 263
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 264
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 265
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 266
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 267
    testRunner.And("Generate new Get Departure flight by \"Audit\" and \"Id\" using \"historyId\" with valu" +
                        "e fetched from DB response in above step and verify the details for recent updat" +
                        "ed departure record for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Audit Fl" +
                        "ight API For Delete record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 270
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Departure Flight API For Audit By Tim" +
            "eStamp API Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIDepartureFlightAPIForAuditByTimeStampAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Departure Flight API For Audit By Tim" +
                    "eStamp API Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 273
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 274
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 277
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 279
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 280
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 281
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 282
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 283
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 284
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 285
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 286
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 287
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 289
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 290
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 291
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 292
    testRunner.And("Generate new Get Departure flight by \"Audit\" and \"Time\" using \"timestamp\" with va" +
                        "lue fetched from DB response and Set DTO Objects for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 293
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 294
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 295
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Departure Flight API For Audit By Tim" +
            "eStamp API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIDepartureFlightAPIForAuditByTimeStampAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Departure Flight API For Audit By Tim" +
                    "eStamp API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 298
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 299
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 300
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 301
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 302
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 303
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 304
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 305
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 306
    testRunner.Then("Execute Crud Post Departure Flight API and Set DTO Objects for Crud API Departure" +
                        " Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 307
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 308
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 309
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 310
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 311
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 312
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 313
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 314
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 315
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 316
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 317
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 318
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 319
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 320
    testRunner.Then("Generate new put Departure Flight API URL using database fetched values and Execu" +
                        "te Crud Put API Departure Flight and Set DTO Objects for Crud API Departure Flig" +
                        "ht", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 321
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightDataForSiteIdAsc\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 322
    testRunner.And("Generate new Get Departure flight by \"Audit\" and \"Time\" using \"timestamp\" with va" +
                        "lue fetched in above step and verify the details for recent updated departure re" +
                        "cord for Crud Departure Flight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 323
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 324
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateDepartur" +
                        "eDetails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 326
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Audit Fl" +
                        "ight API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 327
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedDepartur" +
                        "eFlightData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 328
    testRunner.And("Generate new Delete Departure flight API URL and Execute Crud Delete API request " +
                        "and Set DTO Objects for Crud API Departure Flight", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 329
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud UnmatchedFlightPlan API for Departure Unmatched Flights and val" +
            "idate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForDepartureUnmatchedFlightsValidation")]
        public void ValidateGetCrudUnmatchedFlightPlanAPIForDepartureUnmatchedFlightsAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForDepartureUnmatchedFlightsValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud UnmatchedFlightPlan API for Departure Unmatched Flights and val" +
                    "idate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 332
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 333
    testRunner.Then("Generate new get \"DepartureUnmatchedFlights\" using \"opDate\" with values \"2023-01-" +
                        "26\" and Execute Crud Get All Departure Unmatched Flights request and Set DTO Obj" +
                        "ects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 334
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForDep" +
                        "artureWithNoFlightPlan\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 335
    testRunner.And("Compare values from API response set to DB record set for Crud Departure Flight A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan " +
            "body based on Departure Flight plan Id and Operation date and validate the recor" +
            "d gets updated into Departure DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("patchAPIRequestResponseValidationForDepartureFlights")]
        public void ValidateThePatchCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnDepartureFlightPlanIdAndOperationDateAndValidateTheRecordGetsUpdatedIntoDepartureDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "patchAPIRequestResponseValidationForDepartureFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan " +
                    "body based on Departure Flight plan Id and Operation date and validate the recor" +
                    "d gets updated into Departure DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 338
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 339
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 340
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 341
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 342
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 343
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 344
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 345
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 346
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 347
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 348
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 349
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 350
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanIdOperat" +
                        "ionDateDepartureTable\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 351
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 352
    testRunner.Then("Generate new patch Unmatched Flight Plan API URL using fetched values and Execute" +
                        " Crud Patch Unmatched Flight Plan API and validate that the record in Arrival ta" +
                        "ble is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 353
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 354
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 355
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepFlightDetailsOp" +
                        "erationDate\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 356
    testRunner.Then("Generate new Delete \"FlightPlanid\" using \"flightPlanid\" with value \"AT08998877\" a" +
                        "nd \"opDate\" with value \"2022-05-06\" and Execute Crud Delete flight plan id reque" +
                        "st and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 357
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan body based on Departure Flight plan Id and Operation date and validate the record gets updated into Departure DB and also validate that the record should be deleted from unmatched flight plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("patchAPIRequestResponseValidationForDepartureFlights")]
        public void ValidateThePatchCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnDepartureFlightPlanIdAndOperationDateAndValidateTheRecordGetsUpdatedIntoDepartureDBAndAlsoValidateThatTheRecordShouldBeDeletedFromUnmatchedFlightPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "patchAPIRequestResponseValidationForDepartureFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Validate The Patch Crud API Unmatched Flight Plan API and update the flight plan body based on Departure Flight plan Id and Operation date and validate the record gets updated into Departure DB and also validate that the record should be deleted from unmatched flight plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 360
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 361
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 362
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 363
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 365
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 366
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 367
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 368
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 369
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 370
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 371
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 372
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 373
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanIdOperat" +
                        "ionDateDepartureTableWithUnmatchedData\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 374
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 375
    testRunner.Then("Generate new patch Unmatched Flight Plan API URL using fetched values and Execute" +
                        " Crud Patch Unmatched Flight Plan API and validate that the record in Departure " +
                        "table is updated and the same in unmatched table is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 376
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteIdWithFieldValueNull\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 377
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 378
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepartureFlights\" " +
                        "and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 379
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute(@"Validate The Put Crud API Unmatched Flight Plan API and update the flight plan body based on combination of Departure Site && Carrier && FlightNumber &&  OperationDate && Destination and validate the record gets updated into Departure DB and should be deleted from unmatched flight plan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidationForDepartureFlights")]
        public void ValidateThePutCrudAPIUnmatchedFlightPlanAPIAndUpdateTheFlightPlanBodyBasedOnCombinationOfDepartureSiteCarrierFlightNumberOperationDateDestinationAndValidateTheRecordGetsUpdatedIntoDepartureDBAndShouldBeDeletedFromUnmatchedFlightPlan()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "putAPIRequestResponseValidationForDepartureFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo(@"Validate The Put Crud API Unmatched Flight Plan API and update the flight plan body based on combination of Departure Site && Carrier && FlightNumber &&  OperationDate && Destination and validate the record gets updated into Departure DB and should be deleted from unmatched flight plan", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 382
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 383
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 384
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 385
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepartureFlightDet" +
                        "ails\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 386
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 387
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 388
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 389
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 390
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 391
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 392
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 393
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 394
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 395
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 396
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 397
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 398
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateCarrierFlightNumOp" +
                        "dateDestinationDepartureTableWithUnmatchedData\" and \"SQLConstants_DepartureFligh" +
                        "t\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 399
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftTypeDataFor" +
                        "SiteIdAsc\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 400
    testRunner.Then("Generate new put Unmatched Flight Plan API URL using fetched values and Execute C" +
                        "rud Put Unmatched Flight Plan API and validate that the record in Arrival table " +
                        "is updated and the same in unmatched table is deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 401
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllDepartureFlightD" +
                        "etailsWithZRHSiteIdWithFieldValueNull\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 402
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 403
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepartureFlightDet" +
                        "ailsFieldValues\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 404
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud UnmatchedFlightPlan API for All Flight Plans column and validat" +
            "e the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForALLFlightPlansColumnValidation")]
        public void ValidateGetCrudUnmatchedFlightPlanAPIForAllFlightPlansColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForALLFlightPlansColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud UnmatchedFlightPlan API for All Flight Plans column and validat" +
                    "e the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 407
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 408
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateUnmatchedF" +
                        "lightPlanTable\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 409
    testRunner.Then("Generate new get \"AllFlightPlans\" using \"opDate\" with values \"2023-03-08\" and Exe" +
                        "cute Crud Get By All Flight Plans request and Set DTO Objects for Crud Unmatched" +
                        " FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 410
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllUnmatchedFlightP" +
                        "lanDataWithFlightPlanId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 411
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 412
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateFlightPlan" +
                        "\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 413
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanArrFligh" +
                        "tTable\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 414
    testRunner.Then("Generate new get \"AllFlightPlans\" using \"opDate\" with values \"2022-08-22\" and Exe" +
                        "cute Crud Get By All Flight Plans request and Set DTO Objects for Crud Unmatched" +
                        " FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 415
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForFli" +
                        "ghtPlanArrival\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 416
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 417
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanArrFligh" +
                        "t\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 418
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanDepFligh" +
                        "tTable\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 419
    testRunner.Then("Generate new get \"AllFlightPlans\" using \"opDate\" with values \"2022-08-25\" and Exe" +
                        "cute Crud Get By All Flight Plans request and Set DTO Objects for Crud Unmatched" +
                        " FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 420
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForFli" +
                        "ghtPlanDeparture\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 421
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 422
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanDepFligh" +
                        "t\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud UnmatchedFlightPlan API for All Flight Plans by Flight Plan Id " +
            "column and validate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForALLFlightPlansbyFlightPlanIdColumnValidation")]
        public void ValidateGetCrudUnmatchedFlightPlanAPIForAllFlightPlansByFlightPlanIdColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "getAPIRequestResponseForALLFlightPlansbyFlightPlanIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud UnmatchedFlightPlan API for All Flight Plans by Flight Plan Id " +
                    "column and validate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 425
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 426
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateUnmatchedF" +
                        "lightPlanTable\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 427
    testRunner.Then("Generate new get \"FlightPlansbyFlightPlanId\" using \"flightplanid\" with value \"AT0" +
                        "894970\" and \"opDate\" with values \"2023-03-08\" and Execute Crud Get By All Flight" +
                        " Plans by FLight plan id request and Set DTO Objects for Crud Unmatched FlightPl" +
                        "an API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 428
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DataWithFlightPlanId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 429
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateFlightPlan" +
                        "\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 431
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanArrFligh" +
                        "tTable\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 432
    testRunner.Then("Generate new get \"FlightPlansbyFlightPlanId\" using \"flightplanid\" with value \"1\" " +
                        "and \"opDate\" with values \"2022-08-22\" and Execute Crud Get By All Flight Plans b" +
                        "y FLight plan id request and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 433
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForFli" +
                        "ghtPlanArrival\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 434
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 435
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanArrFligh" +
                        "t\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 436
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanDepFligh" +
                        "tTable\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 437
    testRunner.Then("Generate new get \"FlightPlansbyFlightPlanId\" using \"flightplanid\" with value \"2\" " +
                        "and \"opDate\" with values \"2022-08-25\" and Execute Crud Get By All Flight Plans b" +
                        "y FLight plan id request and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 438
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForFli" +
                        "ghtPlanDeparture\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 439
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 440
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightPlanDepFligh" +
                        "t\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Unmatched Flight Plan by flight plan id Delete for Arrival and Depar" +
            "ture Flights and validate the fetched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIDepartureFlights")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestForFlightPlanIdResponseValidationForArrivalAndDepartureFlights")]
        public void ValidateTheUnmatchedFlightPlanByFlightPlanIdDeleteForArrivalAndDepartureFlightsAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIDepartureFlights",
                    "deleteAPIRequestForFlightPlanIdResponseValidationForArrivalAndDepartureFlights"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Unmatched Flight Plan by flight plan id Delete for Arrival and Depar" +
                    "ture Flights and validate the fetched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 443
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 444
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchDepartureFlightDeta" +
                        "ilsWithSiteId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 445
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 446
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepartureFlightDet" +
                        "ailsForFlightPlanId\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 447
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchArrivalFlightDetail" +
                        "sWithSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 448
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 449
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsForFlightPlanId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 450
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchFlightPlanIdDepartu" +
                        "reTable\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 451
    testRunner.And("Validate that the fetched \"FlightPlanId\" value from DB is NULL post deleting the " +
                        "flightplan Id using delete API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 452
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchFlightPlanIdArrival" +
                        "Table\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 453
    testRunner.And("Validate that the fetched \"FlightPlanId\" value from DB is NULL post deleting the " +
                        "flightplan Id using delete API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 454
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateDepartureFlightDet" +
                        "ailsOperationDate\" and \"SQLConstants_DepartureFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 455
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
