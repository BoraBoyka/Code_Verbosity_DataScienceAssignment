// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPISidSeparationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPISidSeparation.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPISidSeparation", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPISidSeparation")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPISidSeparationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Sid Separation and validate the response with DB record set" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPISidSeparationAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPISidSeparation",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Sid Separation and validate the response with DB record set" +
                    "", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteZRHForTestData\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
    testRunner.Then("Execute Get Crud Sid Separation API And Set DTO Objects for Crud API Sid Separati" +
                        "on for site claim \"ZRH\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSidSeparationDataFo" +
                        "rDynamicSite\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
    testRunner.And("Compare values from API response set to DB record set for Crud Sid Separation Get" +
                        " API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 15
    testRunner.Then("Execute Get Crud Sid Separation API And Set DTO Objects for Crud API Sid Separati" +
                        "on for site claim \"MGL\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("Validate that the response returned from the above step for Sid Separation matrix" +
                        " should be an empty List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud Sid Separation API and validate the record gets added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudSidSeparationAPIAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPISidSeparation",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud Sid Separation API and validate the record gets added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 20
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop1SidDetailsWithR" +
                        "unway\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.Then("Execute Crud Put Sid Separation API and Set DTO Objects for Crud Sid Separation A" +
                        "PI", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedSidSepar" +
                        "ationData\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
    testRunner.And("Compare values from API response set to DB record set for Crud Sid Separation Get" +
                        " API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop1SidDetailsWithE" +
                        "xistingRunway\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.Then("again Execute Crud Put Sid Separation API using the existing Leader Sid and Follo" +
                        "wer Sid name and validate that it should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedSidSepa" +
                        "ration\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedSidShor" +
                        "tName\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud Sid Separation API for a site that user doesn\'t have access to " +
            "and validate that the response should throw an error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPISidSeparation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudSidSeparationAPIForASiteThatUserDoesntHaveAccessToAndValidateThatTheResponseShouldThrowAnError()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPISidSeparation",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud Sid Separation API for a site that user doesn\'t have access to " +
                    "and validate that the response should throw an error", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 31
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteTXLForTestData\"" +
                        " and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop1SidDetailsWithR" +
                        "unway\" and \"SQLConstants_SidAndSidSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.Then("Execute Crud Put Sid Separation API for incorrect Site and validate that user sho" +
                        "uld get an error message in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
