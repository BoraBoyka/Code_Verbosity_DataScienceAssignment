// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPIWakeSeparationTimeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPIWakeSeparationTime.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPIWakeSeparationTime", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPIWakeSeparationTime")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPIWakeSeparationTimeFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeSeparationTime and validate the response with DB record" +
            " set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIWakeSeparationTimeAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeSeparationTime and validate the response with DB record" +
                    " set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud WakeSeparationTime API And Set DTO Objects for Crud API WakeSeparati" +
                        "onTime for site claim \"ZRH\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeSeparationTimeD" +
                        "ata\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set for Crud WakeSeparationTime" +
                        " API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API WakeSeparationTime and validate the record gets added into" +
            " DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIWakeSeparationTimeAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API WakeSeparationTime and validate the record gets added into" +
                    " DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.Then("Execute Crud Post WakeSeparationTime API and Set DTO Objects for Crud API WakeSep" +
                        "arationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
    testRunner.Then("again Execute Crud Post WakeSeparationTime API with a duplicate Leader and Follow" +
                        "er Id value and verify that it should return error via API for Crud WakeSeparati" +
                        "onTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeSeparationTime by specific column and validate the fetc" +
            "hed details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIWakeSeparationTimeBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeSeparationTime by specific column and validate the fetc" +
                    "hed details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 24
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.And("Generate new Get WakeSeparationTime by \"Id\" API URL and Execute Crud Get By Id re" +
                        "quest and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 26
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 27
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistWakeSe" +
                        "paration\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
    testRunner.Then("Validate the GET API operation by \"Id\" API URL again using the ID that doesn\'t ex" +
                        "ist fetched from DB and it should return error via API for Crud WakeSeparationTi" +
                        "me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeSepar" +
                        "ationTimesTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeSeparationTimes" +
                        "DetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And("Generate new Get WakeSeparationTime by \"Id\" API URL and Execute Crud Get By Id re" +
                        "quest for a different Site Id than what is being used in the token and validate " +
                        "that the api should return error in the response body for Crud API WakeSeparatio" +
                        "nTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteWakeSeparationDeta" +
                        "ils\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeSeparationTime by leader and follower column and valida" +
            "te the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIWakeSeparationTimeByLeaderAndFollowerColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeSeparationTime by leader and follower column and valida" +
                    "te the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 38
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.Then("Execute Crud Post WakeSeparationTime API and Set DTO Objects for Crud API WakeSep" +
                        "arationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.And("Generate new Get WakeSeparationTime using Leader Category and Follower Category \"" +
                        "LeaderWakeTurbulenceCategoryId\" in the API URL and Execute Crud Get By Id reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 42
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSeparationTimeForRe" +
                        "centAddedWakeSeparationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
    testRunner.And("Compare values from API response set for the one field to DB record set for Crud " +
                        "WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 44
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistWakeSe" +
                        "paration\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.Then("Validate the GET API operation by \"Id\" API URL again using the ID that doesn\'t ex" +
                        "ist fetched from DB and it should return error via API for Crud WakeSeparationTi" +
                        "me", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API WakeSeparationTime and validate the record gets updated int" +
            "o DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIWakeSeparationTimeAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API WakeSeparationTime and validate the record gets updated int" +
                    "o DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 49
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.Then("Execute Crud Post WakeSeparationTime API and Set DTO Objects for Crud API WakeSep" +
                        "arationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.Then("Generate new put WakeSeparationTime API URL using database fetched values and Exe" +
                        "cute Crud Put API WakeSeparationTime and Set DTO Objects for Crud API WakeSepara" +
                        "tionTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
    testRunner.Then("again Execute Crud Put WakeSeparationTime API and try to update the Leader Id and" +
                        " verify that it should return error via API for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
    testRunner.Then("again Execute Crud Put WakeSeparationTime API and try to update the Follower Id a" +
                        "nd verify that it should return error via API for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
    testRunner.Then("again Execute Crud Put WakeSeparationTime API and try to update the Leader Id and" +
                        " Separation Seconds and verify that it should return error via API for Crud Wake" +
                        "SeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.Then("again Execute Crud Put WakeSeparationTime API and try to update the Follower Id a" +
                        "nd Separation Seconds and verify that it should return error via API for Crud Wa" +
                        "keSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.Then("again Execute Crud Put WakeSeparationTime API and try to update Separation Second" +
                        "s and keep Leader and Follower details the same and verify that this time the up" +
                        "date should happen correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud WakeSeparationTime API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 62
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate WakeSeparationTime Delete Crud API for specific row and validate the fet" +
            "ched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateWakeSeparationTimeDeleteCrudAPIForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate WakeSeparationTime Delete Crud API for specific row and validate the fet" +
                    "ched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 66
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.Then("Execute Crud Post WakeSeparationTime API and Set DTO Objects for Crud API WakeSep" +
                        "arationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedWakeSe" +
                        "parationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.Then("Validate the GET API operation again using the same deleted ID and it should retu" +
                        "rn error via API for Crud WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Add WakeSeparationTime List and validate the record gets a" +
            "dded into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIAddWakeSeparationTimeListAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Add WakeSeparationTime List and validate the record gets a" +
                    "dded into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 75
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.Then("Execute Crud Post \"AddWakeSeparationTimeList\" API and Set DTO Objects for Crud AP" +
                        "I Add WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keSeparationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
    testRunner.And("Compare values from API response set to DB record set for Crud WakeSeparationTime" +
                        " API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedWakeSeparationDat" +
                        "aForTop2Rows\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Add WakeSeparationTime List and validate the record gets up" +
            "dated into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIAddWakeSeparationTimeListAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Add WakeSeparationTime List and validate the record gets up" +
                    "dated into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 84
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 86
    testRunner.Then("Execute Crud Post \"AddWakeSeparationTimeList\" API and Set DTO Objects for Crud AP" +
                        "I Add WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keSeparationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.Then("Generate new put \"UpdateWakeSeparationTimeList\" API and Set DTO Objects for Crud " +
                        "API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 89
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedTopTwoWa" +
                        "keSeparationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
    testRunner.And("Compare values from API response set to DB record set for Crud WakeSeparationTime" +
                        " API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
    testRunner.Then("Establish Database Connection While Executing SQL Query \"deletedWakeSeparationDat" +
                        "aForTop2Rows\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API WakeSeparationTime and pass incorrect siteId in the token a" +
            "nd validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateGetCrudAPIWakeSeparationTimeAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API WakeSeparationTime and pass incorrect siteId in the token a" +
                    "nd validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 95
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 97
    testRunner.Then("Execute Crud WakeSeparationTime API with an incorrect Site id for site claim \"Bad" +
                        "Site\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate WakeSeparationTime Get Crud API with a different siteId than what is bei" +
            "ng passed in the token and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateWakeSeparationTimeGetCrudAPIWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate WakeSeparationTime Get Crud API with a different siteId than what is bei" +
                    "ng passed in the token and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 101
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeSepar" +
                        "ationTimesTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeSeparationTimes" +
                        "DetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 105
    testRunner.And("Generate new Get WakeSeparationTime by \"Id\" API URL using different Site id \"TXL\"" +
                        " than what is being used in the token and validate that the api should return er" +
                        "ror in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate WakeSeparationTime Delete Crud API with a different Site Id passed in th" +
            "e token and validate that the record with another site id should not be deleted " +
            "via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateWakeSeparationTimeDeleteCrudAPIWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate WakeSeparationTime Delete Crud API with a different Site Id passed in th" +
                    "e token and validate that the record with another site id should not be deleted " +
                    "via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 112
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 113
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 115
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeSepar" +
                        "ationTimesTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("Generate new Delete WakeSeparationTime API URL with an different Site id than wha" +
                        "t is being used in the token and validate that the api should return error in th" +
                        "e response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API WakeSeparationTime insert with a different Site Id than wh" +
            "at is being passed in the token and validate that the record should not be inser" +
            "ted via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePostCrudAPIWakeSeparationTimeInsertWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeInsertedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "postAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API WakeSeparationTime insert with a different Site Id than wh" +
                    "at is being passed in the token and validate that the record should not be inser" +
                    "ted via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 125
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.Then("Execute Crud Post WakeSeparationTime API using different Site id than what is bei" +
                        "ng used in the token and validate that the api should return error in the respon" +
                        "se body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.Then("Execute Crud Post WakeSeparationTime API and Set DTO Objects for Crud API WakeSep" +
                        "arationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API WakeSeparationTime update with a different Site Id than wha" +
            "t is being passed in the token and validate that the record should not be update" +
            "d via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIWakeSeparationTime")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePutCrudAPIWakeSeparationTimeUpdateWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeUpdatedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIWakeSeparationTime",
                    "putAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API WakeSeparationTime update with a different Site Id than wha" +
                    "t is being passed in the token and validate that the record should not be update" +
                    "d via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 133
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 134
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 136
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordWakeSepar" +
                        "ationTimesTable\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeSeparationTimes" +
                        "DetailsWithSiteId\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.Then("Generate new put WakeSeparationTime API URL using different Site id than what is " +
                        "being used in the token and validate that the api should return error in the res" +
                        "ponse body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedWakeSepa" +
                        "rationData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
    testRunner.And("Generate new Delete WakeSeparationTime API URL and Execute Crud Delete API reques" +
                        "t and Set DTO Objects for Crud API WakeSeparationTime", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
