// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPIFlightPlanUnmatchedFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPIFlightPlanUnmatched.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPIFlightPlanUnmatched", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPIFlightPlanUnmatched")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPIFlightPlanUnmatchedFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API All Unmatched FlightPlans and validate the response with DB" +
            " record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIAllUnmatchedFlightPlansAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API All Unmatched FlightPlans and validate the response with DB" +
                    " record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud UnmatchedFlightPlan API And Set DTO Objects for Crud API FlightPlan " +
                        "for site claim \"ZRH\" for \"AllUnmatchedFlightplans\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "Data\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Unmatched FlightPlan Id by specific column and validate the" +
            " fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIUnmatchedFlightPlanIdBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Unmatched FlightPlan Id by specific column and validate the" +
                    " fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("Generate new get \"UnmatchedFlightplanbyId\" using \"id\" \"Id\" value fetched from DB " +
                        "and Execute Crud Get By Unmatched Flights by Id request and Set DTO Objects for " +
                        "Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d for Crud Unmatched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistUnmatc" +
                        "hedFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.Then("Validate the GET API operation by \"UnmatchedFlightplanbyId\" API URL using \"id\" \"u" +
                        "nmatchedFlightPlanId\" that does not exist fetched from DB and it should return e" +
                        "rror via API for Crud Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTXLSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DetailsWithDesSiteId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
    testRunner.And(@"Generate new get ""UnmatchedFlightplanbyId"" using ""id"" ""Id"" value fetched from DB and Execute Crud Get By Id request for a different Site Id than what is being used in the token and validate that the api should return error in the response body for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 24
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateZRHSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Unmatched FlightPlan by FlightPlan Id column and validate t" +
            "he fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForFlightPlanIdColumnValidation")]
        public void ValidateGetCrudAPIUnmatchedFlightPlanByFlightPlanIdColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseForFlightPlanIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Unmatched FlightPlan by FlightPlan Id column and validate t" +
                    "he fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 29
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.And("Generate new get \"UnmatchedFlightsbyFlightPlanId\" using \"flightplanid\" \"FlightPla" +
                        "nId\" value fetched from DB and Execute Crud Get By Unmatched Flights by FlightPl" +
                        "anId request and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 31
    testRunner.And("Compare values from API response set to DB record set for flightplanId for Crud U" +
                        "nmatched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistUnmatc" +
                        "hedFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.Then("Validate the GET API operation by \"UnmatchedFlightsbyFlightPlanId\" API URL using " +
                        "\"unmatchedFlightPlanId\" \"flightplanid\" that does not exist fetched from DB and i" +
                        "t should return empty list via API for Crud Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTXLSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DetailsWithDesSiteId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
    testRunner.And(@"Generate new get ""UnmatchedFlightplanbyId"" using ""id"" ""Id"" value fetched from DB and Execute Crud Get By Id request for a different Site Id than what is being used in the token and validate that the api should return error in the response body for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateZRHSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud UnmatchedFlightPlan API by FlightsByOperationalDate column and " +
            "validate the fetched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForFlightsByOperationalDateColumnValidation")]
        public void ValidateGetCrudUnmatchedFlightPlanAPIByFlightsByOperationalDateColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseForFlightsByOperationalDateColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud UnmatchedFlightPlan API by FlightsByOperationalDate column and " +
                    "validate the fetched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 43
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateUnmatchedF" +
                        "lightPlanTable\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
    testRunner.Then("Generate new get \"UnmatchedFlightPlansByOperationDate\" using \"opDate\" with values" +
                        " \"2023-03-08\" and Execute Crud Get By OperationalDate request and Set DTO Object" +
                        "s for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 45
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForOpD" +
                        "ateUnmatchedFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateOperDateFlightPlan" +
                        "\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API UnmatchedFlightPlan for all the site claims that user has a" +
            "ccess to and validate the response with DB record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIUnmatchedFlightPlanForAllTheSiteClaimsThatUserHasAccessToAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API UnmatchedFlightPlan for all the site claims that user has a" +
                    "ccess to and validate the response with DB record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 51
    testRunner.Then("Execute Crud UnmatchedFlightPlan API And Set DTO Objects for Crud API UnmatchedFl" +
                        "ightPlan for \"AllUnmatchedFlightplans\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 52
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DataForAllSiteClaims\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud Get API UnmatchedFlightPlan and pass incorrect siteId in the token " +
            "and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateCrudGetAPIUnmatchedFlightPlanAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud Get API UnmatchedFlightPlan and pass incorrect siteId in the token " +
                    "and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 57
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteZRHForTestData\"" +
                        " and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 59
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 60
    testRunner.Then("Establish Database Connection While Executing SQL Query \"addDataFlightPlanTable\" " +
                        "and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
    testRunner.Then("Execute Crud UnmatchedFlightPlan API with an incorrect Site id for site claim \"Ba" +
                        "dSite\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Unmatched Flight Plan with a different siteId than what is " +
            "being passed in the token and validate that the api should not return any respon" +
            "se")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateGetCrudAPIUnmatchedFlightPlanWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Unmatched Flight Plan with a different siteId than what is " +
                    "being passed in the token and validate that the api should not return any respon" +
                    "se", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 66
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 67
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTXLSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DetailsWithDesSiteId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
    testRunner.Then("Generate new Get Unmatched FlightPlan using \"id\" \"Id\" for different Site id \"TXL\"" +
                        " than what is being used in the token and validate that the unmatched flight pla" +
                        "n api should return error in the response body for \"UnmatchedFlightplanbyId\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateZRHSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Unmatched Flight Plan Delete Crud API for specific row and validate " +
            "the fetched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateTheUnmatchedFlightPlanDeleteCrudAPIForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Unmatched Flight Plan Delete Crud API for specific row and validate " +
                    "the fetched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 75
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 76
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 80
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("Fetch value for field \"Id\" against Aircraft Type Id fetched from database respons" +
                        "e to the above query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordUnmatched" +
                        "FlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedUnmatc" +
                        "hedFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Unmatched Flight Plan Delete Crud API with a different Site Id passe" +
            "d in the token and validate that the record with another site id should not be d" +
            "eleted via api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateTheUnmatchedFlightPlanDeleteCrudAPIWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Unmatched Flight Plan Delete Crud API with a different Site Id passe" +
                    "d in the token and validate that the record with another site id should not be d" +
                    "eleted via api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 91
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 92
    testRunner.Then("Fetch value for site \"TXL\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTXLSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchUnmatchedFlightPlan" +
                        "DetailsWithDesSiteId\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
    testRunner.And("Generate new Delete Unmatched Flight Plan API URL with an different Site id than " +
                        "what is being used in the token and validate that the api should return error in" +
                        " the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
    testRunner.Then("Fetch value for site \"ZRH\" and use it in the below sql query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateZRHSiteForUnmatche" +
                        "dFlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Unmatched Flight Plan by flight plan id Delete Crud API for specific" +
            " row and validate the fetched details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestForFlightPlanIdResponseValidation")]
        public void ValidateTheUnmatchedFlightPlanByFlightPlanIdDeleteCrudAPIForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "deleteAPIRequestForFlightPlanIdResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Unmatched Flight Plan by flight plan id Delete Crud API for specific" +
                    " row and validate the fetched details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 101
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.And("Fetch value for field \"Id\" against Aircraft Type Id fetched from database respons" +
                        "e to the above query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordUnmatched" +
                        "FlightPlan\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 111
    testRunner.Then("Generate new Delete \"FlightPlanid\" using \"flightPlanid\" with value \"AT0894977\" an" +
                        "d \"opDate\" with value \"2023-03-08\" and Execute Crud Delete flight plan id reques" +
                        "t and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 112
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Unmatched Flight Plan and validate the record gets added i" +
            "nto DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIUnmatchedFlightPlanAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Unmatched Flight Plan and validate the record gets added i" +
                    "nto DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 115
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 116
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAllArrivalFlightDet" +
                        "ailsWithZRHSiteId\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateArrivalFlightDetai" +
                        "lsOperationDate\" and \"SQLConstants_ArrivalFlight\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 121
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 124
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 125
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.Then("Execute Crud Post Unmatched Flight API using the same request body and verify tha" +
                        "t the response should return the recent added Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.Then("Generate new Delete \"FlightPlanid\" using \"flightPlanid\" with value \"AT08998877\" a" +
                        "nd \"opDate\" with value \"2022-05-06\" and Execute Crud Delete flight plan id reque" +
                        "st and Set DTO Objects for Crud Unmatched FlightPlan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud Put API Unmatched Flight Plan and validate the record gets updated " +
            "into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidateCrudPutAPIUnmatchedFlightPlanAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud Put API Unmatched Flight Plan and validate the record gets updated " +
                    "into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 137
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 138
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
    testRunner.Then("Generate new put Unmatched Flight Plan API URL using database fetched values and " +
                        "Execute Crud Put API Unmatched Flight Plan and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataWithoutFieldValue\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
    testRunner.Then("Establish Database Connection While Executing SQL Query \"updateFlightNumber\" and " +
                        "\"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Post Crud API Unmatched Flight Plan with an incorrect SiteId in the chil" +
            "d object and validate the record should still be added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidatePostCrudAPIUnmatchedFlightPlanWithAnIncorrectSiteIdInTheChildObjectAndValidateTheRecordShouldStillBeAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Post Crud API Unmatched Flight Plan with an incorrect SiteId in the chil" +
                    "d object and validate the record should still be added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 153
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 154
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 156
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 157
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API with incorrect SiteId in the child ob" +
                        "ject and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 158
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
    testRunner.And("Compare values from API response set to DB record set for Crud UnmatchedFlightPla" +
                        "n API Post request", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
            "y Id API Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIUnmatchedFlightPlanAPIForAuditByIdAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
                    "y Id API Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 164
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 165
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 168
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 171
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
    testRunner.And("Generate new Get Unmatched flight plan by \"Audit\" and \"Id\" using \"historyId\" with" +
                        " value fetched from DB response in above step and Set DTO Objects for Crud Unmat" +
                        "ched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
            "y Id API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIUnmatchedFlightPlanAPIForAuditByIdAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
                    "y Id API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 180
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 181
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 183
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 184
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 185
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 186
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 192
    testRunner.Then("Generate new put Unmatched Flight API URL and Set DTO Objects for Crud API Unmatc" +
                        "hed Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 195
    testRunner.And("Generate new Get Unmatched flight plan by \"Audit\" and \"Id\" using \"historyId\" with" +
                        " value fetched from DB response in above step and verify the details for recent " +
                        "updated unmatched flight plan record for Crud Unmatched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
    testRunner.And("Compare values from API response set to DB record set for Crud Unmatched Audit Fl" +
                        "ight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 198
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 199
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Record Addition using Get Crud API Unmatched Flight Plan API For Aud" +
            "it By Id API Validation For Delete Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByIdAPI")]
        public void ValidateTheRecordAdditionUsingGetCrudAPIUnmatchedFlightPlanAPIForAuditByIdAPIValidationForDeleteOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidationForAuditByIdAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Record Addition using Get Crud API Unmatched Flight Plan API For Aud" +
                    "it By Id API Validation For Delete Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 203
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 204
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 214
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 215
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 216
    testRunner.And("Generate new Get Unmatched flight plan by \"Audit\" and \"Id\" using \"historyId\" with" +
                        " value fetched from DB response in above step and verify the details for recent " +
                        "updated unmatched flight plan record for Crud Unmatched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 217
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 218
    testRunner.And("Compare values from API response set to DB record set for Crud Unmatched Audit Fl" +
                        "ight Plan API For Delete record", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 219
 testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
            "y TimeStamp API Validation For Insert Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIUnmatchedFlightPlanAPIForAuditByTimeStampAPIValidationForInsertOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
                    "y TimeStamp API Validation For Insert Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 222
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 223
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 224
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 225
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 226
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 227
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 228
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 229
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 230
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 231
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 232
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 233
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 234
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 235
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 236
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 237
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 238
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 239
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 240
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 241
    testRunner.And("Generate new Get Unmatched flight plan by \"Audit\" and \"Time\" using \"timestamp\" wi" +
                        "th value fetched from DB response and Set DTO Objects for Crud Unmatched Flight " +
                        "Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 242
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 243
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
            "y TimeStamp API Validation For Update Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIFlightPlanUnmatched")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIUnmatchedFlightPlan")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidationForAuditByTimeStampAPI")]
        public void ValidateRecordAdditionUsingGetCrudAPIUnmatchedFlightPlanAPIForAuditByTimeStampAPIValidationForUpdateOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIUnmatchedFlightPlan",
                    "getAPIRequestResponseValidationForAuditByTimeStampAPI"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Record Addition using Get Crud API Unmatched Flight Plan API For Audit B" +
                    "y TimeStamp API Validation For Update Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 247
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 248
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 249
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 250
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 251
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 252
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchWakeTurbulenceCateg" +
                        "oryData\" and \"SQLConstants_WakeTurbulenceAndSeparation\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 253
    testRunner.Then("Execute Crud Post Aircraft Type API and Set DTO Objects for Crud API Aircraft Typ" +
                        "e", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 254
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedAircraft" +
                        "TypeDataWithDynamicId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 255
    testRunner.Then("Execute Crud Post Unmatched Flight Plan API and Set DTO Objects for Crud API Unma" +
                        "tched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 256
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 257
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 259
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 260
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceSpaceinTimestampF" +
                        "orAudit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 261
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 262
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceColoninTimestampF" +
                        "orAudit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 263
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 264
    testRunner.Then("Establish Database Connection While Executing SQL Query \"replaceAddinTimestampFor" +
                        "Audit\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 265
    testRunner.And("Fetch value for field \"ChangeTime\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 266
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 267
    testRunner.And("Fetch value for field \"Id\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 268
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAircraftDetailsWith" +
                        "AscendingSiteId\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 269
    testRunner.Then("Generate new put Unmatched Flight API URL and Set DTO Objects for Crud API Unmatc" +
                        "hed Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 270
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanDataForSiteIdAsc\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 271
    testRunner.And("Generate new Get Unmatched flight plan by \"Audit\" and \"Time\" using \"timestamp\" wi" +
                        "th value fetched in above step and verify the details for recent updated unmatch" +
                        "ed flight plan record for Crud Unmatched Flight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 272
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditInsertUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 273
    testRunner.And("Fetch value for field \"HistoryId\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchAuditUpdateUnmatche" +
                        "dFlightPlanDetails\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 275
    testRunner.And("Compare values from API response set to DB record set for Crud Unmatched Audit Fl" +
                        "ight Plan API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 276
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedUnmatche" +
                        "dFlightPlanData\" and \"SQLConstants_UnmatchedFlightPlan\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 277
    testRunner.And("Generate new Delete Unmatched flight plan API URL and Execute Crud Delete API req" +
                        "uest and Set DTO Objects for Crud API Unmatched Flight Plan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
    testRunner.And("Generate new Delete aircraft type API URL using the added aircraft Id and Execute" +
                        " Crud Delete API request and Set DTO Objects for Crud API Aircraft Type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
