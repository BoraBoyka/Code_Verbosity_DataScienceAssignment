// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.API.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class CrudAPIConfigurationFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "CrudAPIConfiguration.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CrudAPIConfiguration", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "CrudAPIConfiguration")))
            {
                global::ACDMAutomation.API.Tests.Features.CrudAPIConfigurationFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
testRunner.Given("Read API Config values for Env Info stored in ConfigSetting and Set DTO Objects", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
testRunner.Then("Generate JWT Authorization Token for Environment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud API Get Configuration and validate the response with DB record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateCrudAPIGetConfigurationAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud API Get Configuration and validate the response with DB record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 9
    testRunner.Then("Execute Crud Configuration API And Set DTO Objects for Crud API Configuration for" +
                        " site claim \"ZRH\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationData\" " +
                        "and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
    testRunner.And("Compare values from API response set to DB record set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud API Post Configuration and validate the record gets added into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestResponseValidation")]
        public void ValidateCrudAPIPostConfigurationAndValidateTheRecordGetsAddedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "postAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud API Post Configuration and validate the record gets added into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 14
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 15
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 17
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
    testRunner.Then("Execute Crud Post API Configuration and Set DTO Objects for Crud API Configuratio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationData\" " +
                        "and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 21
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
    testRunner.And("Generate new Delete configuration API URL and Execute Crud Delete API request and" +
                        " Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Configuration and validate the record gets updated into DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestResponseValidation")]
        public void ValidatePutCrudAPIConfigurationAndValidateTheRecordGetsUpdatedIntoDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "putAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Configuration and validate the record gets updated into DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 26
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
    testRunner.Then("Generate new put configuration API URL using database fetched values and Execute " +
                        "Crud Put API Configuration and Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration by specific column and validate the fetched d" +
            "etails for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForIdColumnValidation")]
        public void ValidateGetCrudAPIConfigurationBySpecificColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseForIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration by specific column and validate the fetched d" +
                    "etails for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 35
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
    testRunner.And("Generate new Get configuration by \"Id\" API URL and Execute Crud Get By Id request" +
                        " and Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExist\" and " +
                        "\"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
    testRunner.Then("Validate the GET API operation by \"Id\" API URL again using the ID that doesn\'t ex" +
                        "ist fetched from DB and it should return error via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
    testRunner.And("Generate new Get configuration by \"Id\" API URL and Execute Crud Get By Id request" +
                        " for a different Site Id than what is being used in the token and validate that " +
                        "the api should return error in the response body for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Delete Crud API Configuration for specific row and validate the fetc" +
            "hed details for the row to be NULL in DB")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestResponseValidation")]
        public void ValidateTheDeleteCrudAPIConfigurationForSpecificRowAndValidateTheFetchedDetailsForTheRowToBeNULLInDB()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "deleteAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Delete Crud API Configuration for specific row and validate the fetc" +
                    "hed details for the row to be NULL in DB", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 45
testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordConfigura" +
                        "tionTable\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
    testRunner.And("Generate new Delete configuration API URL and Execute Crud Delete API request and" +
                        " Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedConfig" +
                        "urationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 53
    testRunner.Then("Validate the GET API operation again using the same deleted ID and it should retu" +
                        "rn error via API", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration by Name column and validate the fetched detai" +
            "ls for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForNameColumnValidation")]
        public void ValidateGetCrudAPIConfigurationByNameColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseForNameColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration by Name column and validate the fetched detai" +
                    "ls for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 57
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
    testRunner.And("Generate new \"ConfigurationByName\" using \"Name\" in the API URL and Execute Crud G" +
                        "et By \"name\" request and Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForNam" +
                        "eConfiguration\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 61
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
    testRunner.And(@"Generate new ""ConfigurationByName"" using ""Name"" in the API URL and Execute Get By ""name"" API request for a different Site Id than what is being used in the token and validate that the api should return No Content in the response body for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration by System column and validate the fetched det" +
            "ails for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForSystemColumnValidation")]
        public void ValidateGetCrudAPIConfigurationBySystemColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseForSystemColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration by System column and validate the fetched det" +
                    "ails for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 66
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 67
    testRunner.And("Generate new \"ConfigurationBySystem\" using \"System\" in the API URL and Execute Cr" +
                        "ud Get By \"system\" request and Set DTO Objects for Crud API Configuration data", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForSys" +
                        "temConfiguration\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
    testRunner.And("Compare values from API response set to DB record set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 71
    testRunner.And(@"Generate new ""ConfigurationBySystem"" using ""System"" in the API URL and Execute Get By ""system"" API request for a different Site Id than what is being used in the token and validate that the api should return empty list in the response body for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration by System and Group column and validate the f" +
            "etched details for the column")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseForSystemAndGroupColumnValidation")]
        public void ValidateGetCrudAPIConfigurationBySystemAndGroupColumnAndValidateTheFetchedDetailsForTheColumn()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseForSystemAndGroupColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration by System and Group column and validate the f" +
                    "etched details for the column", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 74
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 75
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
    testRunner.And("Generate new \"ConfigurationBySystemGroup\" using \"Group\" and \"System\" in the API U" +
                        "RL and Execute Crud Get By \"system\" and \"group\" request and Set DTO Objects for " +
                        "Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecordDetailsForSys" +
                        "temAndGroup\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 78
    testRunner.And("Compare values from API response set to DB record set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Or Add Crud API Post Configuration by SiteId method and validate the" +
            " fetched or add details")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getOrAddAPIRequestResponseForSiteIdColumnValidation")]
        public void ValidateGetOrAddCrudAPIPostConfigurationBySiteIdMethodAndValidateTheFetchedOrAddDetails()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getOrAddAPIRequestResponseForSiteIdColumnValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Or Add Crud API Post Configuration by SiteId method and validate the" +
                    " fetched or add details", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 81
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 82
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
    testRunner.And("Generate new \"GetOrAddConfiguration\" API URL and Execute Crud Post request for ex" +
                        "isting record and Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
    testRunner.And("Generate new \"GetOrAddConfiguration\" API URL and Execute Crud Post request for ne" +
                        "w record and Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentAddedConfigur" +
                        "ationData\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
    testRunner.And("Compare values from API response set to DB record set for a single returned recor" +
                        "d", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
    testRunner.And("Generate new Delete configuration API URL and Execute Crud Delete API request and" +
                        " Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration for all the site claims that user has access " +
            "to and validate the response with DB record set")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestResponseValidation")]
        public void ValidateGetCrudAPIConfigurationForAllTheSiteClaimsThatUserHasAccessToAndValidateTheResponseWithDBRecordSet()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestResponseValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration for all the site claims that user has access " +
                    "to and validate the response with DB record set", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 95
    testRunner.Then("Execute Crud Configuration API And Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDataFo" +
                        "rAllSiteClaims\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
    testRunner.And("Compare values from API response set to DB record set", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration and pass incorrect siteId in the token and va" +
            "lidate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestIncorrectSiteIdValidation")]
        public void ValidateGetCrudAPIConfigurationAndPassIncorrectSiteIdInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestIncorrectSiteIdValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration and pass incorrect siteId in the token and va" +
                    "lidate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 101
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchIdDoesntExistSite\" " +
                        "and \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
    testRunner.And("Generate JWT Authorization Token for Site Claim that doesnot exist for Environmen" +
                        "t Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
    testRunner.Then("Execute Crud Configuration API with an incorrect Site id  for site claim \"BadSite" +
                        "\" and validate that the api should return error in the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Get Crud API Configuration with a different siteId than what is being pa" +
            "ssed in the token and validate that the api should not return any response")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("getAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateGetCrudAPIConfigurationWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheApiShouldNotReturnAnyResponse()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "getAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Get Crud API Configuration with a different siteId than what is being pa" +
                    "ssed in the token and validate that the api should not return any response", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 106
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 107
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdAscending\" an" +
                        "d \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
    testRunner.Then("Generate new Get Configuration by \"Id\" API URL using different Site id \"TXL\" than" +
                        " what is being used in the token and validate that the api should return error i" +
                        "n the response body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate The Delete Crud API Configuration with a different Site Id passed in the" +
            " token and validate that the record with another site id should not be deleted v" +
            "ia api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("deleteAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateTheDeleteCrudAPIConfigurationWithADifferentSiteIdPassedInTheTokenAndValidateThatTheRecordWithAnotherSiteIdShouldNotBeDeletedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "deleteAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate The Delete Crud API Configuration with a different Site Id passed in the" +
                    " token and validate that the record with another site id should not be deleted v" +
                    "ia api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 111
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 112
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
    testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
    testRunner.Then("Establish Database Connection While Executing SQL Query \"insertNewRecordConfigura" +
                        "tionTable\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithDesSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 118
    testRunner.And("Generate new Delete Configuration API URL with an different Site id than what is " +
                        "being used in the token and validate that the api should return error in the res" +
                        "ponse body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 119
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithDesSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
    testRunner.And("Generate new Delete configuration API URL and Execute Crud Delete API request and" +
                        " Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Crud API Post Configuration insert with a different Site Id than what is" +
            " being passed in the token and validate that the record should not be inserted v" +
            "ia api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("postAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidateCrudAPIPostConfigurationInsertWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeInsertedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "postAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Crud API Post Configuration insert with a different Site Id than what is" +
                    " being passed in the token and validate that the record should not be inserted v" +
                    "ia api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 125
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 127
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchSiteIdDescending\" a" +
                        "nd \"SQLConstants_TaxiSequenceAndSite\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
    testRunner.Then("Execute Crud Post Configuration API using different Site id than what is being us" +
                        "ed in the token and validate that the api should return error in the response bo" +
                        "dy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
    testRunner.Then("Generate JWT Authorization Token for one particular Site Claim that exist for Env" +
                        "ironment Info stored in ConfigSetting", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
    testRunner.Then("Execute Crud Post API Configuration and Set DTO Objects for Crud API Configuratio" +
                        "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 131
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithDesSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
    testRunner.And("Generate new Delete configuration API URL and Execute Crud Delete API request and" +
                        " Set DTO Objects for Crud API Configuration", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Validate Put Crud API Configuration update with a different Site Id than what is " +
            "being passed in the token and validate that the record should not be updated via" +
            " api")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("CrudAPIConfiguration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("putAPIRequestDifferentSiteIdThanTokenValidation")]
        public void ValidatePutCrudAPIConfigurationUpdateWithADifferentSiteIdThanWhatIsBeingPassedInTheTokenAndValidateThatTheRecordShouldNotBeUpdatedViaApi()
        {
            string[] tagsOfScenario = new string[] {
                    "CrudAPIConfiguration",
                    "putAPIRequestDifferentSiteIdThanTokenValidation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate Put Crud API Configuration update with a different Site Id than what is " +
                    "being passed in the token and validate that the record should not be updated via" +
                    " api", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 135
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 136
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 137
    testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
    testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchConfigurationDetail" +
                        "sWithSiteId\" and \"SQLConstants_Configuration\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
    testRunner.Then("Generate new put Configuration API URL using different Site id than what is being" +
                        " used in the token and validate that the api should return error in the response" +
                        " body", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
