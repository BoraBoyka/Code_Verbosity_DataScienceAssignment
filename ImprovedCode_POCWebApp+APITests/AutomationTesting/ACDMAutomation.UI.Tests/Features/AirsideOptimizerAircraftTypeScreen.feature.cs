// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ACDMAutomation.UI.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class AirsideOptimizerAircraftTypeScreenFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "AirsideOptimizerAircraftTypeScreen.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AirsideOptimizerAircraftTypeScreen", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "AirsideOptimizerAircraftTypeScreen")))
            {
                global::ACDMAutomation.UI.Tests.Features.AirsideOptimizerAircraftTypeScreenFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 2
#line hidden
#line 3
 testRunner.Given("Launch Browser using URL", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 4
 testRunner.Then("Click \"LogIn_Btn\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 5
 testRunner.Then("Enter UserName against \"LogInUserName_Btn\" and click on \"Submit_Btn\" to ensure th" +
                    "at the logged in user is authenticated to the application displayed on \"AirsideO" +
                    "ptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
 testRunner.Then("Enter Password against \"Password_Btn\" and click on \"SignIn_Btn\" and then click on" +
                    " \"Submit_Btn\" and ensure that the user is authenticated to the \"AirsideOptimizer" +
                    "\" application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.Then("Click \"ResourceData_Tab\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 8
 testRunner.Then("Click \"AircraftTab_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Click on AircraftType tab and validate the Add, Delete, Edit Operation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "AirsideOptimizerAircraftTypeScreen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("AirsideOptimizerAircraftTypeScreen")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("aircraftTypeScreenWorkflows")]
        public void ClickOnAircraftTypeTabAndValidateTheAddDeleteEditOperation()
        {
            string[] tagsOfScenario = new string[] {
                    "AirsideOptimizerAircraftTypeScreen",
                    "aircraftTypeScreenWorkflows"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Click on AircraftType tab and validate the Add, Delete, Edit Operation", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 2
this.FeatureBackground();
#line hidden
#line 12
 testRunner.Then("Establish Database Connection While Executing SQL Query \"updateTypeNameAircraftTa" +
                        "ble\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedRowsAir" +
                        "craftTable\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTotalRowsAircraftTa" +
                        "ble\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And("Fetch value for field \"Row_Count\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then("Establish Database Connection While Executing SQL Query \"countNoOfColumnsTableAir" +
                        "craftType\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And("Fetch value for field \"Column_Count\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop10AircraftTypeDa" +
                        "ta\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.And(@"Compare values from DB record set to Fetched values for field ""Fetch_Id_Text_RowNumber"" and ""Fetch_Id_Text_ColValues"" ""Fetch_Id_Text_Col_HeaderValues"" ""Fetch_IDColHeaderValue"" ""Fetch_IATAColHeaderValue"" ""Fetch_ICAOColHeaderValue"" ""Fetch_EngineColHeaderValue"" ""Fetch_TypeNameColHeaderValue"" ""Fetch_NoOfEnginesColHeaderValue"" ""Fetch_SizeCodeColHeaderValue"" ""Fetch_SpeedClassColHeaderValue"" ""Fetch_WidthColHeaderValue"" and ""Fetch_CategoryNameColHeaderValue"" displayed on ""AirsideOptimizer"" from application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedRowsAir" +
                        "craftTable\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 23
 testRunner.Then("Click \"Add_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
 testRunner.Then("Click \"Update_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 25
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or_UI\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorMessages_ExpectedUI"});
                table1.AddRow(new string[] {
                            "WarningValidation^\'Icao\' must not be empty.^\'Engine\' must not be empty.^\'TypeName" +
                                "\' must not be empty.^\'Size Code\' must not be empty.^\'Speed Class\' must not be em" +
                                "pty.^\'Category Name\' must not be empty."});
#line 27
 testRunner.And("Validate the \"ErrorMessages_Screen\" are displayed appropriately on screen fields " +
                        "displayed on \"ConfigurationScreen\"", ((string)(null)), table1, "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "IATA",
                            "ICAO",
                            "Engine",
                            "TypeName",
                            "SizeCode",
                            "SpeedClass"});
                table2.AddRow(new string[] {
                            "M",
                            "M",
                            "HELI_Test1",
                            "Airbus",
                            "D",
                            "V6_Jet"});
#line 30
 testRunner.And(@"Enter values against ""AircraftType_IATA"" ""AircraftType_ICAO"" ""AircraftType_Engine"" ""AircraftType_TypeName"" ""AircraftType_SizeCode"" ""AircraftType_SpeedClass"" ""AircraftType_CategoryName"" ""AircraftType_CategoryNameValueSelection"" ""AircraftType_NoOfEngines"" and ""AircraftType_Width"" fields displayed on ""AircraftTypeScreen""", ((string)(null)), table2, "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ErrorMessages_ExpectedUI"});
                table3.AddRow(new string[] {
                            "WarningValidation^\'Icao\' already exists. It must be Unique.^\'# of Engines\' must b" +
                                "e greater than or equal to 0."});
#line 33
 testRunner.And("Enter duplicate value \"A320\" against \"AircraftType_ICAO\" and update a negative va" +
                        "lue against \"AircraftType_NoOfEngines_Negative\" and validate the \"ErrorMessages_" +
                        "Screen\" are displayed appropriately on screen fields displayed on \"AircraftTypeS" +
                        "creen\"", ((string)(null)), table3, "And ");
#line hidden
#line 36
 testRunner.Then("Click \"CancelBtn_AddConfigFlow\" displayed on \"ConfigurationScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 39
 testRunner.Then("Double click the \"AircraftType_SortTypeNameColumn\" \"AircraftType_TypeNameDescendi" +
                        "ngSortValueSelect\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "IATA",
                            "ICAO",
                            "Engine",
                            "TypeName",
                            "SizeCode",
                            "SpeedClass"});
                table4.AddRow(new string[] {
                            "O1",
                            "01",
                            "HELI_Test1",
                            "ZZIVKO_Test1",
                            "D",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "Z2",
                            "Z2",
                            "HELI_Test2",
                            "ZZIVKO_Test2",
                            "NIL",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "W3",
                            "W3",
                            "HELI_Test3",
                            "ZZIVKO_Test3",
                            "D",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "Y4",
                            "Y4",
                            "HELI_Test4",
                            "ZZIVKO_Test4",
                            "NIL",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "U5",
                            "U5",
                            "HELI_Test5",
                            "ZZIVKO_Test5",
                            "D",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "N6",
                            "N6",
                            "HELI_Test6",
                            "ZZIVKO_Test6",
                            "NIL",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "N7",
                            "N7",
                            "HELI_Test7",
                            "ZZIVKO_Test7",
                            "D",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "M8",
                            "M8",
                            "HELI_Test8",
                            "ZZIVKO_Test8",
                            "NIL",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "M9",
                            "M9",
                            "HELI_Test9",
                            "ZZIVKO_Test9",
                            "D",
                            "V6_Jet"});
                table4.AddRow(new string[] {
                            "M0",
                            "M0",
                            "HELI_Test10",
                            "ZZIVKO_Test10",
                            "NIL",
                            "V6_Jet"});
#line 40
 testRunner.Then(@"Click ""Add_Btn"" And Enter values on the Add Screen against ""AircraftType_IATA"" ""AircraftType_ICAO"" ""AircraftType_Engine"" ""AircraftType_TypeName"" ""AircraftType_NoOfEngines"" ""AircraftType_SizeCode"" ""AircraftType_SpeedClass"" ""AircraftType_Width"" ""AircraftType_CategoryName"" and ""AircraftType_CategoryNameValueSelection"" and click ""Update_Btn"" and then click ""ToastMessage_Close"" popup displayed on ""AircraftTypeScreen""", ((string)(null)), table4, "Then ");
#line hidden
#line 53
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop10DescAircraftTy" +
                        "peData\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "IATA",
                            "ICAO",
                            "Engine",
                            "TypeName",
                            "SizeCode",
                            "SpeedClass",
                            "CategoryName",
                            "NumberOfEngines",
                            "Width"});
                table5.AddRow(new string[] {
                            "O1",
                            "O1",
                            "HELI_Test1",
                            "ZZIVKO_Test1",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "Z2",
                            "Z2",
                            "HELI_Test2",
                            "ZZIVKO_Test2",
                            "NIL",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "W3",
                            "W3",
                            "HELI_Test3",
                            "ZZIVKO_Test3",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "Y4",
                            "Y4",
                            "HELI_Test4",
                            "ZZIVKO_Test4",
                            "NIL",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "U5",
                            "U5",
                            "HELI_Test5",
                            "ZZIVKO_Test5",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "N6",
                            "N6",
                            "HELI_Test6",
                            "ZZIVKO_Test6",
                            "NIL",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "N7",
                            "N7",
                            "HELI_Test7",
                            "ZZIVKO_Test7",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "M8",
                            "M8",
                            "HELI_Test8",
                            "ZZIVKO_Test8",
                            "NIL",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "M9",
                            "M9",
                            "HELI_Test9",
                            "ZZIVKO_Test9",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
                table5.AddRow(new string[] {
                            "M0",
                            "M0",
                            "HELI_Test10",
                            "ZZIVKO_Test10",
                            "NIL",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
#line 54
 testRunner.And("Validate the Added values for \"Engine\" \"TypeName\" \"NumberOfEngines\" \"SizeCode\" \"S" +
                        "peedClass\" \"Width\" and \"CategoryName\" fields in Application against Database", ((string)(null)), table5, "And ");
#line hidden
#line 68
 testRunner.Then("Click \"Add_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchMaxIDAircraftTypeTa" +
                        "ble\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 70
 testRunner.And("Fetch value for field \"Id\" from Database returned from above sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 71
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or_UI\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from Query" +
                        " Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "IATA",
                            "ICAO",
                            "Engine",
                            "TypeName",
                            "SizeCode",
                            "SpeedClass"});
                table6.AddRow(new string[] {
                            "U0",
                            "U9",
                            "HELI_Test1",
                            "ZZZIVKO",
                            "D",
                            "V6_Jet"});
#line 73
 testRunner.And(@"Enter values against ""AircraftType_IATA"" ""AircraftType_ICAO"" ""AircraftType_Engine"" ""AircraftType_TypeName"" ""AircraftType_SizeCode"" ""AircraftType_SpeedClass"" ""AircraftType_CategoryName"" ""AircraftType_CategoryNameValueSelection"" ""AircraftType_NoOfEngines"" and ""AircraftType_Width"" fields displayed on ""AircraftTypeScreen""", ((string)(null)), table6, "And ");
#line hidden
#line 76
 testRunner.Then("Click \"Update_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 77
 testRunner.And("Validate the \"ToastMessageValidation\" for \"Added successfully\" displayed on \"Airs" +
                        "ideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop1AircraftTypeDat" +
                        "a\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "IATA",
                            "ICAO",
                            "Engine",
                            "TypeName",
                            "SizeCode",
                            "SpeedClass",
                            "CategoryName",
                            "NumberOfEngines",
                            "Width"});
                table7.AddRow(new string[] {
                            "U0",
                            "U9",
                            "HELI_Test1",
                            "ZZZIVKO",
                            "D",
                            "V6_Jet",
                            "Super Heavy",
                            "2",
                            "1.00"});
#line 79
 testRunner.And("Validate the Added values for \"Id\" \"IATA\" \"ICAO\" \"Engine\" \"TypeName\" \"SizeCode\" \"" +
                        "SpeedClass\" \"CategoryName\" \"NumberOfEngines\" and \"Width\" fields in Application a" +
                        "gainst Database", ((string)(null)), table7, "And ");
#line hidden
#line 84
 testRunner.Then("Refresh the WebPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 85
 testRunner.Then("Click \"AircraftTab_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.Then("Establish Database Connection While Executing SQL Query \"countNoOfColumnsTableAir" +
                        "craftType\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
 testRunner.And("Fetch value for field \"Column_Count\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("Click \"LastPage_Btn\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.Then("Fetch the record Id that the user is going to delete using \"Fetch_DynamicRowNumbe" +
                        "r\" and \"Fetch_DynamicColNumber\" for \"1\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.Then("\"DeleteRecordDetails\" \"Fetch_DynamicRowNumber\" and \"Fetch_DynamicColNumber\" for \"" +
                        "1\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.And("Validate the \"Are you sure you would like to delete this Aircraft Type?\" \"Warning" +
                        "_Message_Popup_Text\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("Click \"Delete_Btn\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("Validate the \"ToastMessageValidation\" for \"Successfully Deleted\" displayed on \"Ai" +
                        "rsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRecentDeletedAircra" +
                        "ftTypeData\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 95
 testRunner.And("Validate the deleted record details from the application against Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 96
 testRunner.Then("\"DeleteRecordDetails\" \"Fetch_DynamicRowNumber\" and \"Fetch_DynamicColNumber\" for \"" +
                        "1\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.And("Click \"Cancel_Btn\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 100
 testRunner.Then("Refresh the WebPage", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.Then("Click \"AircraftTab_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 102
 testRunner.Then("Establish Database Connection While Executing SQL Query \"countNoOfColumnsTableAir" +
                        "craftType\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.And("Fetch value for field \"Column_Count\" from Database returned from Query Response", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("Click \"LastPage_Btn\" displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchRandomNumberGenerat" +
                        "or_UI\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.And("Fetch value for field \"Random_Number_Generator\" from Database returned from above" +
                        " sql Query", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.Then("\"EditRecordDetails\" \"Fetch_DynamicRowNumber\" and \"Fetch_DynamicColNumber\" for \"9\"" +
                        " displayed on \"AirsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.And("Update value \"EE\" and \"F9\" against \"AircraftType_IATA\" and \"AircraftType_ICAO\" fi" +
                        "elds displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("Update value \"HELI_Test8\" against \"AircraftType_Engine\" field displayed on \"Aircr" +
                        "aftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 110
 testRunner.And("Update value \"ZZZZ_Test\" against \"AircraftType_TypeName\" field displayed on \"Airc" +
                        "raftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 111
 testRunner.And("Update value \"D\" against \"AircraftType_SizeCode\" field displayed on \"AircraftType" +
                        "Screen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 112
 testRunner.And("Update value \"V6_Jet\" against \"AircraftType_SpeedClass\" field displayed on \"Aircr" +
                        "aftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.And("Update value \"AircraftType_CategoryName\" against \"AircraftType_CategoryNameValueS" +
                        "election\" dropdown field displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 114
 testRunner.Then("Click \"Update_Btn\" displayed on \"AircraftTypeScreen\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.And("Validate the \"ToastMessageValidation\" for \"Successfully Updated\" displayed on \"Ai" +
                        "rsideOptimizer\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 116
 testRunner.Then("Establish Database Connection While Executing SQL Query \"fetchTop1DescAircraftTyp" +
                        "eData\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.And("Validate the Updated values for \"IATA\" \"EE\" \"ICAO\" \"F9\" \"Engine\" \"HELI_Test8\" \"Ty" +
                        "peName\" \"ZZZZ_Test\" \"SizeCode\" \"D\" \"SpeedClass\" \"V6_Jet\" and \"CategoryName\" \"Sup" +
                        "er Heavy\" fields in Application against Database", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 118
 testRunner.Then("Establish Database Connection While Executing SQL Query \"deleteRecentAddedRowsAir" +
                        "craftTable\" and \"SQLConstants_AircraftTypeAndAirline\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
